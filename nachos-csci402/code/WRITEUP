WRITEUP Template
Title:  Writeup for Project x, Fall/Spring 201x
Date: 11/25/2015
Group: Name   Email    
                        Conner Frey connerfr@usc.edu
                        Hung Vu Viet vuviet@usc.edu
Yui Kwan Calvin Leung yuikwanl@usc.edu 


I. Requirements:
            For this assignment, we must make it so that the passport office completed in project 1 will run across 10 client programs and 5 servers.  The clients should have no knowledge of how the servers act and they should simply be able to function normally. The servers will do all of the heavy lifting for the client. The servers will keep track of all entities across all clients such as locks, conditions, and the states of each entity. In order to do this, we must make Remote Procedure Calls (RPCs) such that the servers can communicate with each other.  Every time a client requests something, the client will send the request to a random server.  This original, random server will process the request, and if necessary, send all of the information out to each other server such that the request comes back with a conclusive answer––either FAIL or SUCCESS.  These FAIL and SUCCESS messages are abstracted in a way such that the server will basically be responding with the answer to the request.  For instance, if a client requests to Acquire a specific lock, the server will respond to the server by telling them that: “the lock has been acquired”, “the lock cannot be acquired”, or “The lock doesn’t exist in this context”.  However, these messages will be encoded with numbers and other integers and characters such that the client knows exactly what was sent back and they know what to do with the response message.  Essentially, the responses are abstracted in such a way that the client will know exactly what happens without having to interpret the string.
            Once all of the RPCs are in place and unit tested, the passport office must be picked apart and converted into executables that the clients can run.  Each client must be able to run their respective passport office independently yet in parallel with one another.  In order to achieve this, the passport.c file must be split up into smaller pieces that can then be executed by the Exec() system call.
 
II. Assumptions:
            - we assume that there is a max of 5 servers and 10 clients. Thus we can have our decoding/encoding factor set to 1,000 and we wouldn’t have to worry about having to use something as large as 10,000.
-       The max number of mailboxes is 10, hence we can only have at most 10 exec processes in a client
-       When we check if other servers have the entity, e.g. lock, CV or MV, we assume that the server that replies YES would do the work and only return a Yes or No answer to the original server
-       The client knows nothing about the RPC and would make the syscalls as usual, the OS takes care of the work done in the “client stub” and the “server stub”
-       Create calls will return the index if a create is called with the same name
-        
 
III. Design:
- This section is to cover your logic and ideas as to how  you are going to solve the problem presented.  This should include a description of classes, algorithms, etc. This is not code. You must document ALL parts of a project.  
-       nettest.cc
-       structurally speaking, we kept our logic from project 3 to have a server while(true) loop with a big switch statement to determine which syscall the client is calling by decoding the message into syscall codes such as ‘L’ for Lock, ‘C’ for condition, ‘M’ for monitor, and some other ones such as ‘D’ for destroy, ‘B’ for broadcast, ‘A’ for acquire and ‘S’ for signal etc.
-       we then added another switch statement for remote procedure calls such that we can send and receive, encode and decode messages from clients and servers.
-       ‘0’ means it is a first-time request from a client, never passed through any servers before
-       ‘C’ means it is sent from the original server getting the request, we have to Check if we have the entity
-       ‘Y’ means it is a reply from a server to the original server, stating that the server has the entity and has already performed the action
-       ‘N’ means that it is a reply from a server to the original server, stating that the server does not have the entity, nothing is done
-       ‘F’ means that it is a fail request, it happens when something like a server has the lock to the condition, but the lock was not acquired by the client that sent the request, in cases like that we directly fail the request from the original server
-       ‘S’, ‘A’, ‘R’, ‘W’ respectively mean signal, acquire, release and wait, when a server receives these responses, it means that the lock and conditions are found and are validated, so we could just proceed and execute the calls instead of checking everything again
-       the hardest part of the design is to figure out where the packets are sent and received. 
-       In the current design, we only placed into the encoded message information include: response code, client machine Id, client mailbox, sysCode1 (lock, cond or monitor), syscode2 (create, acquire,  broadcast etc.), name.
-       That means that we did not include from which server the message is sent to check/ reply and we need to have another logic to record the pktHdr.to and mailHdr.to so that we reply to the right place
-       We also made handy functions to encode and decode indexes in functions so that we access the correct array index without the server number
-       The indexes are encoded as <servernumber><index>, e.g. 3001 means it is on the 4th server, has index 1.  We check if the first digit matches the machineId and then we decide if we should send it to other servers, when a server receives a check message, they have to check if it is equal to their machineId, and check if the entity is valid, e.g. deleted or not
- The server number goes from 0-4, if there are 5 servers,  i.e. the client ids start from 0+serverCount.  if there are 3 servers, serverIds are 0,1,2; client Ids start from 3-whatever
 


IV. Implementation:
+ Files Modified
- nettest.c
+ Files added
All the following files are the converted passport office from assignment 2
These four files represent their respective clerk entities
applicationClerk.c
cashier.c
passportClerk.c
pictureClerk.c
These three files represent the senator, customer and manager entities respectively
senator.c
customer.c
manager.c
These are user programs that Exec the number of clerks, senators, customers as determined in setup.c, and a single manager for the passport office
passportofficeClerks.c
passportofficeCustomers.c
passportofficeManager.c
passportofficeSenators.c
These two functions are used by the customer, senator and clerks to initialize shared data
setup.c
setup.h

+ Data Structures added, and the file they were added to.
+ nettest.c
            - ServerRequest pending[MAX_CLIENT_COUNT][MAX_MAILBOX_COUNT];
- WaitRequest waitRequest[MAX_CLIENT_COUNT][MAX_MAILBOX_COUNT];
+ Data Structures modified, and the file they were added to.
 


+ Functions added and in which file.
nettest.c
            - int decodeMailbox(int value)
            - int decodeEntityIndex(int value)
            - bool serverAndMachineIdMatch(int mailboxNum)
            - void serverReleaseLock(int lockIndex, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void redirectToOriginalClient(PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox, int messageLength)
            -  checkEntityByName(char* name, Entity e)
            - bool hasEntity(char* msg, bool isCreate, char* name, Entity e, bool containsEntity, int mailbox)
            - int encodeEntityIndex(int entityIndex)
            - bool checkCurrentServerContainEntity(bool isCreate, char* name, char* msg, int sysCode1, int entityIndex1)
            - void deletePendingRequest(int id, int mailbox)
            - void setClientandServer(PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            -  sendMessageToClient(char* data, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void sendCreateEntityMessage(stringstream &ss, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void checkOtherServers(char *tempString, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void Acquire_RPC_server(int lockIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            -  Just_Release(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void Just_Wait(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox, bool isOriginalServer)
            - void Just_Acquire(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void Just_Signal(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox, int ogClientId, int ogClientMailbox)
            - void actionOnRemoteServer(stringstream &ss, bool isLock, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            -  releaseOnRemoteServer(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void waitOnRemoteServer(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void acquireOnRemoteServer(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void signalOnRemoteServer(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox, int ogClientId, int ogClientMailbox)
            - SignalMoreThanOne_server(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox, int ogClientId, int ogClientMailbox)
            - void WaitMoreThanOne_server(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void AcquireMoreThanOne_server(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void releaseLockMoreThanOne_server(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void Wait_without_release(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void Signal_without_send(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
            - void lookForLockOnOtherServers(int id, int mailBox, char sysCode1, int entityIndex1, int entityIndex2, int entityIndex3, char* name, PacketHeader &pktHdr, MailHeader &mailHdr)
            - bool lookForLockLogic(bool currentServerHasLock, int id, int mailbox, char sysCode1, int entityIndex1, int entityIndex2, int entityIndex3, char* name, PacketHeader &pktHdr, MailHeader &mailHdr)
            - void deleteWaitingRequest(int id, int mailbox)
            - void waitRequestFail(int id, int mailbox, PacketHeader &pktHdr, MailHeader &mailHdr)

+ Functions modified and in which file.
            + nettest.c
- void Server()
- void Wait_server(int lockIndex, int conditionIndex, PacketHeader &pktHdr, MailHeader &mailHdr, int id, int mailbox)
-

V. Testing:  (For each test case, you must show)
            + How to test
We have provided a converted Passport Office to prove our implementation works. The tests will have to be run from the network directory. Tests in the test directory have to be compiled.
A single instance of passport office requires 7 types of entities:
Application clerks in applicationClerk.c
Picture clerks in pictureClerk.c
Passport clerks in passportClerk.c
Cashiers in cashier.c
Senators in senator.c
Customers in customer.c
Manager in manager.c
For simplicity’s sake, the four clerks have been put into a single clerk user program. Our unit tests have already proven that more than 6 user programs can be ran.
Therefore, these entities are Exec’ed in four user programs
passportofficeClerks.c
passportofficeCustomers.c
passportofficeManager.c
passportofficeSenators.c
The default values for entities can be found in the DEFINE values at the top of setup.c file.
The submitted test has 16 Customers, 8 Clerks -  2 Application Clerks, 2 Picture Clerks, 2 Passport Clerks, 2 Cashiers - 0 Senators and 1 Manager.
We have chosen 2 clerks in order to fit them all in a user program, but unit tests have proven that a larger number of clerks per category still operate. 
There are no senators, as senator behaviour is incomplete and only work when there are single instance of every clerk.
Since there are 16 customers, they will not be able to be run from a single user program, and two instances of passportofficeCustomers.c must be run.

To run: 
Start servers
    There can be any number of servers up to 5, but most of our tests were done using 2 servers    
For every server:
    nachos -m uniqueMachineID - n numberOfServers
    Note: The first server must have machine ID 0, and following servers must have consequent IDs
Start clerks
    The clerk user program also has the initialization call, and thus must be created first, it also makes sense logically to begin with clerks
    Run: nachos -x ../test/passportofficeClerks -m uniqueMachineID -n numberOfServers
Start customers
    The customers can be started interchangeably with the senators or other customers
Run:  nachos -x ../test/passportofficeCustomers -m uniqueMachineID -n numberOfServers
Start senators
The senators can be started interchangeably with the senators or other customers
Run:  nachos -x ../test/passportofficeSenators -m uniqueMachineID -n numberOfServers
Start the manager
    There is to be only one instance of manager per passport office instance. It is also preferable to start the manager at the end as it guarantees all entities exist before the manager starts running the office
Run:  nachos -x ../test/passportofficeManager -m uniqueMachineID -n numberOfServers

A full example for two servers with above variables:
1st window: nachos -m 0 -n 2 
        2nd: nachos -m 1 -n 2
        3rd: nachos -x ../test/passportofficeClerks -m 2 - n 2
        4th:  nachos -x ../test/passportofficeCustomers -m 3 - n 2
        5th:  nachos -x ../test/passportofficeCustomers -m 4 - n 2
        6th:  nachos -x ../test/passportofficeManager -m 5 -n 2
        (7th:nachos -x ../test/passportofficeSenators -m 6 - n 2)




            + Test Output
The expected output is that the customers and senators exit properly. 
The output for the customer’s and senator’s user program should show all of them leaving 
the passport office, i.e. for 16 customers, there should be 16 customers leaving the passport office. 
Other outputs in the respective windows describe the behaviour in the passport office.
An example of customer 5 leaving the office: 
Customer_5 is leaving the Passport Office.
-----------Exit Output: 0

VI. Discussion:
            + Experiment expectation.  
        For the example described in the testing portion, each of the two passportofficeCustomers user program terminals should successfully exit and have lines that state that some customer has left the passport office, 8 customers per window.
            + Experiment result.  
        The experiment successfully completes.
            + Explanation
        The passport office is a complex program that utilises all the required system calls and uses RPC to send them to the servers which process these requests and send them back to the passport office. Each of the clerks, customers, senators and the manager share variables as predetermined in the setup.c/setup.h files. They all share locks, conditions and monitor variables and even though they interact with each other, they do not directly communicate with each other but rather by using these resources and sending messages through the server(s). If any customer successfully leaves the passport office, it means that our implementation works correctly, as it indicates that the customer was able to communicate with at-least one of each clerk. If 16 customers have successfully completed the passport office, it means that they were able to see each other, and the manager properly managed the clerks to service all these customers.

VIII. Miscellaneous:
    


 
 


